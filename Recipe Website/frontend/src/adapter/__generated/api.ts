/* tslint:disable */
/* eslint-disable */
/**
 * WE_HA1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface DeleteCategoriesFromRecipeRequest
 */
export interface DeleteCategoriesFromRecipeRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof DeleteCategoriesFromRecipeRequest
     */
    'categories'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DeleteIngredientsFromRecipeRequest
 */
export interface DeleteIngredientsFromRecipeRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof DeleteIngredientsFromRecipeRequest
     */
    'ingredientNames'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DeleteStepsFromRecipeRequest
 */
export interface DeleteStepsFromRecipeRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof DeleteStepsFromRecipeRequest
     */
    'stepNumbers'?: Array<number>;
}
/**
 * 
 * @export
 * @interface GetAllRecipeByCategoriesRequest
 */
export interface GetAllRecipeByCategoriesRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetAllRecipeByCategoriesRequest
     */
    'categoryList'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GetAllRecipeByIngredientsRequest
 */
export interface GetAllRecipeByIngredientsRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetAllRecipeByIngredientsRequest
     */
    'ingredientList'?: Array<string>;
}
/**
 * 
 * @export
 * @interface Ingredient
 */
export interface Ingredient {
    /**
     * 
     * @type {string}
     * @memberof Ingredient
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Ingredient
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Ingredient
     */
    'link'?: string;
}
/**
 * 
 * @export
 * @interface Recipe
 */
export interface Recipe {
    /**
     * 
     * @type {string}
     * @memberof Recipe
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Recipe
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof Recipe
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof Recipe
     */
    'picture'?: string;
    /**
     * 
     * @type {Array<RecipeIngredient>}
     * @memberof Recipe
     */
    'recipeIngredients'?: Array<RecipeIngredient>;
    /**
     * 
     * @type {Array<RecipeTag>}
     * @memberof Recipe
     */
    'recipeTags'?: Array<RecipeTag>;
    /**
     * 
     * @type {Array<RecipeStep>}
     * @memberof Recipe
     */
    'recipeSteps'?: Array<RecipeStep>;
}
/**
 * 
 * @export
 * @interface RecipeIngredient
 */
export interface RecipeIngredient {
    /**
     * 
     * @type {number}
     * @memberof RecipeIngredient
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof RecipeIngredient
     */
    'unit': string;
    /**
     * 
     * @type {Ingredient}
     * @memberof RecipeIngredient
     */
    'ingredient': Ingredient;
    /**
     * 
     * @type {Recipe}
     * @memberof RecipeIngredient
     */
    'recipe'?: Recipe;
}
/**
 * 
 * @export
 * @interface RecipeStep
 */
export interface RecipeStep {
    /**
     * 
     * @type {number}
     * @memberof RecipeStep
     */
    'number': number;
    /**
     * 
     * @type {string}
     * @memberof RecipeStep
     */
    'description'?: string;
    /**
     * 
     * @type {Recipe}
     * @memberof RecipeStep
     */
    'recipe'?: Recipe;
}
/**
 * 
 * @export
 * @interface RecipeTag
 */
export interface RecipeTag {
    /**
     * 
     * @type {Category}
     * @memberof RecipeTag
     */
    'category': Category;
    /**
     * 
     * @type {Recipe}
     * @memberof RecipeTag
     */
    'recipe'?: Recipe;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Categories from a Recipe
         * @param {string} name 
         * @param {DeleteCategoriesFromRecipeRequest} [deleteCategoriesFromRecipeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoriesFromRecipe: async (name: string, deleteCategoriesFromRecipeRequest?: DeleteCategoriesFromRecipeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteCategoriesFromRecipe', 'name', name)
            const localVarPath = `/recipe/{name}/categories`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCategoriesFromRecipeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Category
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteCategory', 'name', name)
            const localVarPath = `/category/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an Ingredient
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIngredient: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteIngredient', 'name', name)
            const localVarPath = `/ingredient/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Ingredients from a Recipe
         * @param {string} name 
         * @param {DeleteIngredientsFromRecipeRequest} [deleteIngredientsFromRecipeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIngredientsFromRecipe: async (name: string, deleteIngredientsFromRecipeRequest?: DeleteIngredientsFromRecipeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteIngredientsFromRecipe', 'name', name)
            const localVarPath = `/recipe/{name}/ingredients`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteIngredientsFromRecipeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Recipe
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipe: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteRecipe', 'name', name)
            const localVarPath = `/recipe/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Steps from a Recipe
         * @param {string} name 
         * @param {DeleteStepsFromRecipeRequest} [deleteStepsFromRecipeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStepsFromRecipe: async (name: string, deleteStepsFromRecipeRequest?: DeleteStepsFromRecipeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteStepsFromRecipe', 'name', name)
            const localVarPath = `/recipe/{name}/recipesteps`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteStepsFromRecipeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategory: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Ingredient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllIngredients: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ingredient`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Recipe By an Ingredient
         * @param {string} ingredient 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRecipeByAnIngredient: async (ingredient: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredient' is not null or undefined
            assertParamExists('getAllRecipeByAnIngredient', 'ingredient', ingredient)
            const localVarPath = `/recipeingredient/{ingredient}/ingredient`
                .replace(`{${"ingredient"}}`, encodeURIComponent(String(ingredient)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Recipe by Categories
         * @param {GetAllRecipeByCategoriesRequest} [getAllRecipeByCategoriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRecipeByCategories: async (getAllRecipeByCategoriesRequest?: GetAllRecipeByCategoriesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recipetag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getAllRecipeByCategoriesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Recipe by Ingredients
         * @param {GetAllRecipeByIngredientsRequest} [getAllRecipeByIngredientsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRecipeByIngredients: async (getAllRecipeByIngredientsRequest?: GetAllRecipeByIngredientsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recipeingredient`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getAllRecipeByIngredientsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Recipe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRecipes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recipe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All RecipeStep
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRecipesteps: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getAllRecipesteps', 'name', name)
            const localVarPath = `/recipestep/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a Category
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategory: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getCategory', 'name', name)
            const localVarPath = `/category/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an Ingredient
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredient: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getIngredient', 'name', name)
            const localVarPath = `/ingredient/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Ingredients From Recipe
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientsFromRecipe: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getIngredientsFromRecipe', 'name', name)
            const localVarPath = `/recipeingredient/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a Recipe
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipe: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getRecipe', 'name', name)
            const localVarPath = `/recipe/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Recipe GT Rating
         * @param {number} rating 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeGtRating: async (rating: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rating' is not null or undefined
            assertParamExists('getRecipeGtRating', 'rating', rating)
            const localVarPath = `/recipe/recipes/{rating}`
                .replace(`{${"rating"}}`, encodeURIComponent(String(rating)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Categories From Recipe
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsFromRecipe: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getTagsFromRecipe', 'name', name)
            const localVarPath = `/recipetag/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a Category
         * @param {Category} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategory: async (category?: Category, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(category, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create an Ingredient
         * @param {Ingredient} [ingredient] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIngredient: async (ingredient?: Ingredient, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ingredient`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ingredient, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a Recipe
         * @param {Recipe} [recipe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRecipe: async (recipe?: Recipe, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recipe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recipe, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Category
         * @param {string} name 
         * @param {Category} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategory: async (name: string, category?: Category, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('putCategory', 'name', name)
            const localVarPath = `/category/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(category, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an Ingredient
         * @param {string} name 
         * @param {Ingredient} [ingredient] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putIngredient: async (name: string, ingredient?: Ingredient, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('putIngredient', 'name', name)
            const localVarPath = `/ingredient/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ingredient, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Recipe
         * @param {string} name 
         * @param {Recipe} [recipe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRecipe: async (name: string, recipe?: Recipe, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('putRecipe', 'name', name)
            const localVarPath = `/recipe/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recipe, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete Categories from a Recipe
         * @param {string} name 
         * @param {DeleteCategoriesFromRecipeRequest} [deleteCategoriesFromRecipeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategoriesFromRecipe(name: string, deleteCategoriesFromRecipeRequest?: DeleteCategoriesFromRecipeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategoriesFromRecipe(name, deleteCategoriesFromRecipeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.deleteCategoriesFromRecipe']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a Category
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategory(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategory(name, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.deleteCategory']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an Ingredient
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIngredient(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIngredient(name, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.deleteIngredient']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Ingredients from a Recipe
         * @param {string} name 
         * @param {DeleteIngredientsFromRecipeRequest} [deleteIngredientsFromRecipeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIngredientsFromRecipe(name: string, deleteIngredientsFromRecipeRequest?: DeleteIngredientsFromRecipeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIngredientsFromRecipe(name, deleteIngredientsFromRecipeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.deleteIngredientsFromRecipe']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a Recipe
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecipe(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecipe(name, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.deleteRecipe']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Steps from a Recipe
         * @param {string} name 
         * @param {DeleteStepsFromRecipeRequest} [deleteStepsFromRecipeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStepsFromRecipe(name: string, deleteStepsFromRecipeRequest?: DeleteStepsFromRecipeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStepsFromRecipe(name, deleteStepsFromRecipeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.deleteStepsFromRecipe']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get All Category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCategory(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCategory(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getAllCategory']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get All Ingredient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllIngredients(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ingredient>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllIngredients(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getAllIngredients']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get All Recipe By an Ingredient
         * @param {string} ingredient 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRecipeByAnIngredient(ingredient: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Recipe>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRecipeByAnIngredient(ingredient, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getAllRecipeByAnIngredient']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get All Recipe by Categories
         * @param {GetAllRecipeByCategoriesRequest} [getAllRecipeByCategoriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRecipeByCategories(getAllRecipeByCategoriesRequest?: GetAllRecipeByCategoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Recipe>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRecipeByCategories(getAllRecipeByCategoriesRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getAllRecipeByCategories']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get All Recipe by Ingredients
         * @param {GetAllRecipeByIngredientsRequest} [getAllRecipeByIngredientsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRecipeByIngredients(getAllRecipeByIngredientsRequest?: GetAllRecipeByIngredientsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Recipe>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRecipeByIngredients(getAllRecipeByIngredientsRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getAllRecipeByIngredients']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get All Recipe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRecipes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Recipe>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRecipes(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getAllRecipes']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get All RecipeStep
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRecipesteps(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecipeStep>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRecipesteps(name, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getAllRecipesteps']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get a Category
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategory(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategory(name, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getCategory']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get an Ingredient
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIngredient(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ingredient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIngredient(name, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getIngredient']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Ingredients From Recipe
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIngredientsFromRecipe(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecipeIngredient>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIngredientsFromRecipe(name, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getIngredientsFromRecipe']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get a Recipe
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipe(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Recipe>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipe(name, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getRecipe']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Recipe GT Rating
         * @param {number} rating 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipeGtRating(rating: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Recipe>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipeGtRating(rating, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getRecipeGtRating']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Categories From Recipe
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTagsFromRecipe(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecipeTag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTagsFromRecipe(name, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getTagsFromRecipe']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create a Category
         * @param {Category} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCategory(category?: Category, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCategory(category, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.postCategory']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create an Ingredient
         * @param {Ingredient} [ingredient] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIngredient(ingredient?: Ingredient, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ingredient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIngredient(ingredient, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.postIngredient']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create a Recipe
         * @param {Recipe} [recipe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRecipe(recipe?: Recipe, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Recipe>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRecipe(recipe, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.postRecipe']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update a Category
         * @param {string} name 
         * @param {Category} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCategory(name: string, category?: Category, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCategory(name, category, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.putCategory']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update an Ingredient
         * @param {string} name 
         * @param {Ingredient} [ingredient] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putIngredient(name: string, ingredient?: Ingredient, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ingredient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putIngredient(name, ingredient, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.putIngredient']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update a Recipe
         * @param {string} name 
         * @param {Recipe} [recipe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putRecipe(name: string, recipe?: Recipe, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Recipe>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putRecipe(name, recipe, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.putRecipe']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete Categories from a Recipe
         * @param {string} name 
         * @param {DeleteCategoriesFromRecipeRequest} [deleteCategoriesFromRecipeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoriesFromRecipe(name: string, deleteCategoriesFromRecipeRequest?: DeleteCategoriesFromRecipeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCategoriesFromRecipe(name, deleteCategoriesFromRecipeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Category
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(name: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCategory(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an Ingredient
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIngredient(name: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteIngredient(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Ingredients from a Recipe
         * @param {string} name 
         * @param {DeleteIngredientsFromRecipeRequest} [deleteIngredientsFromRecipeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIngredientsFromRecipe(name: string, deleteIngredientsFromRecipeRequest?: DeleteIngredientsFromRecipeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.deleteIngredientsFromRecipe(name, deleteIngredientsFromRecipeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Recipe
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipe(name: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRecipe(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Steps from a Recipe
         * @param {string} name 
         * @param {DeleteStepsFromRecipeRequest} [deleteStepsFromRecipeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStepsFromRecipe(name: string, deleteStepsFromRecipeRequest?: DeleteStepsFromRecipeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.deleteStepsFromRecipe(name, deleteStepsFromRecipeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategory(options?: any): AxiosPromise<Array<Category>> {
            return localVarFp.getAllCategory(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Ingredient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllIngredients(options?: any): AxiosPromise<Array<Ingredient>> {
            return localVarFp.getAllIngredients(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Recipe By an Ingredient
         * @param {string} ingredient 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRecipeByAnIngredient(ingredient: string, options?: any): AxiosPromise<Array<Recipe>> {
            return localVarFp.getAllRecipeByAnIngredient(ingredient, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Recipe by Categories
         * @param {GetAllRecipeByCategoriesRequest} [getAllRecipeByCategoriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRecipeByCategories(getAllRecipeByCategoriesRequest?: GetAllRecipeByCategoriesRequest, options?: any): AxiosPromise<Array<Recipe>> {
            return localVarFp.getAllRecipeByCategories(getAllRecipeByCategoriesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Recipe by Ingredients
         * @param {GetAllRecipeByIngredientsRequest} [getAllRecipeByIngredientsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRecipeByIngredients(getAllRecipeByIngredientsRequest?: GetAllRecipeByIngredientsRequest, options?: any): AxiosPromise<Array<Recipe>> {
            return localVarFp.getAllRecipeByIngredients(getAllRecipeByIngredientsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Recipe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRecipes(options?: any): AxiosPromise<Array<Recipe>> {
            return localVarFp.getAllRecipes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All RecipeStep
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRecipesteps(name: string, options?: any): AxiosPromise<Array<RecipeStep>> {
            return localVarFp.getAllRecipesteps(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a Category
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategory(name: string, options?: any): AxiosPromise<Category> {
            return localVarFp.getCategory(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an Ingredient
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredient(name: string, options?: any): AxiosPromise<Ingredient> {
            return localVarFp.getIngredient(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Ingredients From Recipe
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientsFromRecipe(name: string, options?: any): AxiosPromise<Array<RecipeIngredient>> {
            return localVarFp.getIngredientsFromRecipe(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a Recipe
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipe(name: string, options?: any): AxiosPromise<Recipe> {
            return localVarFp.getRecipe(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Recipe GT Rating
         * @param {number} rating 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeGtRating(rating: number, options?: any): AxiosPromise<Array<Recipe>> {
            return localVarFp.getRecipeGtRating(rating, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Categories From Recipe
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsFromRecipe(name: string, options?: any): AxiosPromise<Array<RecipeTag>> {
            return localVarFp.getTagsFromRecipe(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a Category
         * @param {Category} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategory(category?: Category, options?: any): AxiosPromise<Category> {
            return localVarFp.postCategory(category, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create an Ingredient
         * @param {Ingredient} [ingredient] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIngredient(ingredient?: Ingredient, options?: any): AxiosPromise<Ingredient> {
            return localVarFp.postIngredient(ingredient, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a Recipe
         * @param {Recipe} [recipe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRecipe(recipe?: Recipe, options?: any): AxiosPromise<Recipe> {
            return localVarFp.postRecipe(recipe, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Category
         * @param {string} name 
         * @param {Category} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategory(name: string, category?: Category, options?: any): AxiosPromise<Category> {
            return localVarFp.putCategory(name, category, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an Ingredient
         * @param {string} name 
         * @param {Ingredient} [ingredient] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putIngredient(name: string, ingredient?: Ingredient, options?: any): AxiosPromise<Ingredient> {
            return localVarFp.putIngredient(name, ingredient, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Recipe
         * @param {string} name 
         * @param {Recipe} [recipe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRecipe(name: string, recipe?: Recipe, options?: any): AxiosPromise<Recipe> {
            return localVarFp.putRecipe(name, recipe, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Delete Categories from a Recipe
     * @param {string} name 
     * @param {DeleteCategoriesFromRecipeRequest} [deleteCategoriesFromRecipeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCategoriesFromRecipe(name: string, deleteCategoriesFromRecipeRequest?: DeleteCategoriesFromRecipeRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCategoriesFromRecipe(name, deleteCategoriesFromRecipeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Category
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCategory(name: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCategory(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an Ingredient
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteIngredient(name: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteIngredient(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Ingredients from a Recipe
     * @param {string} name 
     * @param {DeleteIngredientsFromRecipeRequest} [deleteIngredientsFromRecipeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteIngredientsFromRecipe(name: string, deleteIngredientsFromRecipeRequest?: DeleteIngredientsFromRecipeRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteIngredientsFromRecipe(name, deleteIngredientsFromRecipeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Recipe
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRecipe(name: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteRecipe(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Steps from a Recipe
     * @param {string} name 
     * @param {DeleteStepsFromRecipeRequest} [deleteStepsFromRecipeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteStepsFromRecipe(name: string, deleteStepsFromRecipeRequest?: DeleteStepsFromRecipeRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteStepsFromRecipe(name, deleteStepsFromRecipeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllCategory(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllCategory(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Ingredient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllIngredients(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllIngredients(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Recipe By an Ingredient
     * @param {string} ingredient 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllRecipeByAnIngredient(ingredient: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllRecipeByAnIngredient(ingredient, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Recipe by Categories
     * @param {GetAllRecipeByCategoriesRequest} [getAllRecipeByCategoriesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllRecipeByCategories(getAllRecipeByCategoriesRequest?: GetAllRecipeByCategoriesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllRecipeByCategories(getAllRecipeByCategoriesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Recipe by Ingredients
     * @param {GetAllRecipeByIngredientsRequest} [getAllRecipeByIngredientsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllRecipeByIngredients(getAllRecipeByIngredientsRequest?: GetAllRecipeByIngredientsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllRecipeByIngredients(getAllRecipeByIngredientsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Recipe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllRecipes(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllRecipes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All RecipeStep
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllRecipesteps(name: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllRecipesteps(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a Category
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCategory(name: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCategory(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an Ingredient
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getIngredient(name: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getIngredient(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Ingredients From Recipe
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getIngredientsFromRecipe(name: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getIngredientsFromRecipe(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a Recipe
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecipe(name: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRecipe(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Recipe GT Rating
     * @param {number} rating 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecipeGtRating(rating: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRecipeGtRating(rating, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Categories From Recipe
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTagsFromRecipe(name: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTagsFromRecipe(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a Category
     * @param {Category} [category] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postCategory(category?: Category, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postCategory(category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create an Ingredient
     * @param {Ingredient} [ingredient] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postIngredient(ingredient?: Ingredient, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postIngredient(ingredient, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a Recipe
     * @param {Recipe} [recipe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postRecipe(recipe?: Recipe, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postRecipe(recipe, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Category
     * @param {string} name 
     * @param {Category} [category] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putCategory(name: string, category?: Category, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putCategory(name, category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an Ingredient
     * @param {string} name 
     * @param {Ingredient} [ingredient] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putIngredient(name: string, ingredient?: Ingredient, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putIngredient(name, ingredient, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Recipe
     * @param {string} name 
     * @param {Recipe} [recipe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putRecipe(name: string, recipe?: Recipe, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putRecipe(name, recipe, options).then((request) => request(this.axios, this.basePath));
    }
}



